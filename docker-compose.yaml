version: "3.9"

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/ssl:/letsencrypt
    restart: always

  frontend:
    image: cr.yandex/crpmbkrui7s085cd545u/rutube-app:latest
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      # - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    environment:
      API_URL: https://api.localhost

  db:
    container_name: db-local
    image: postgres:15-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ${ROOT_DIR}.app_cache/db:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: cr.yandex/crpmbkrui7s085cd545u/rutube-backend:latest
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: alembic upgrade head
    working_dir: /app/app
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy

  api:
    image: cr.yandex/crpmbkrui7s085cd545u/rutube-backend:latest
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload
    volumes:
      - ./backend:/app
      - ./downloads:/app/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${HOST}`)"
      - "traefik.http.routers.api.entrypoints=web"
      # - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://guest:guest@rabbitmq:5672//
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    restart: always
  
  ml-data-uploader:
    image: curlimages/curl:latest
    command: >
      /bin/sh -c "
      mkdir -p /app/data/train_dataset_tag_video/baseline /app/data/data_prep &&
      wget -O /app/data/train_dataset_tag_video/baseline/train_data_categories.csv https://storage.yandexcloud.net/rutube-ml/train_data_categories.csv &&
      wget -O /app/data/data_prep/filtered_taxonomy.csv https://storage.yandexcloud.net/rutube-ml/filtered_taxonomy.csv &&
      wget -O /app/data/train_dataset_tag_video/baseline/IAB_tags.csv https://storage.yandexcloud.net/rutube-ml/IAB_tags.csv &&
      echo 'Data download complete'
      "
    volumes:
      - ./data/train_dataset_tag_video/:/app/data/train_dataset_tag_video
      - ./data/data_prep/:/app/data/data_prep

  ml-celery-worker:
    restart: always
    image: cr.yandex/crpmbkrui7s085cd545u/rutube-ml:latest
    build: 
      context: ./ml
      dockerfile: Dockerfile
    command: celery -A app.celery_worker worker --loglevel=info
    volumes:
      - ./ml/:/app
      - ./downloads/:/app/downloads
      - ./data/train_dataset_tag_video/:/app/data/train_dataset_tag_video
      - ./data/data_prep/:/app/data/data_prep
    depends_on:
      rabbitmq:
        condition: service_started
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://guest:guest@rabbitmq:5672//
      - MODEL_NAME=hf
      - HF_MODEL_NAME=unsloth/Llama-3.2-1B-Instruct
      - OPENROUTER_MODEL_NAME=unsloth/Llama-3.2-1B-Instruct
      - FILE_PATH_PREDICT=data/train_dataset_tag_video/baseline/train_data_categories.csv
      - FILE_PATH_IAB=data/data_prep/filtered_taxonomy.csv
      - OPENROUTER_API_KEY=${OPENAPI_API_KEY}

  api-celery_worker:
    restart: always
    image: cr.yandex/crpmbkrui7s085cd545u/rutube-backend:latest
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_worker worker --loglevel=info
    volumes:
      - ./backend/:/app
      - ./downloads/:/app/downloads
    depends_on:
      rabbitmq:
        condition: service_started
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://guest:guest@rabbitmq:5672//

  
  rabbitmq:
    image: rabbitmq:3
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
