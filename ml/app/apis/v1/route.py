from fastapi import status
from fastapi.routing import APIRouter
from fastapi import Depends
from sqlalchemy.orm import Session
from app.db.engine import get_db
from app.db.video import Video
from typing import List
from datetime import datetime

from .model import InputCl, OutputCl

router = APIRouter(prefix="/v1")


from fastapi import UploadFile, File, Form
from pydantic import BaseModel, HttpUrl


class VideoUrlInput(BaseModel):
    video_url: HttpUrl


class VideoFileInput(BaseModel):
    description: str
    title: str


class TaskOutput(BaseModel):
    task_id: str


class VideoInfo(BaseModel):
    id: int
    file_path: str
    status: str
    progress: float
    result: str
    created_at: datetime
    updated_at: datetime


@router.post(
    "/process_video_url",
    description="Обрабатывает видео по URL",
    tags=["Inference endpoints"],
    status_code=status.HTTP_202_ACCEPTED,
    response_model=TaskOutput,
)
def process_video_url(input_data: VideoUrlInput) -> TaskOutput:
    # Здесь должна быть логика создания задачи для обработки видео по URL
    task_id = "some_generated_task_id_for_url"  # This should be generated by your task queue system
    return TaskOutput(task_id=task_id)


@router.post(
    "/process_video_file",
    description="Обрабатывает загруженное видео",
    tags=["Inference endpoints"],
    status_code=status.HTTP_202_ACCEPTED,
    response_model=TaskOutput,
)
async def process_video_file(
    file: UploadFile = File(...), description: str = Form(...), title: str = Form(...)
) -> TaskOutput:
    # Здесь должна быть логика создания задачи для обработки загруженного видео
    task_id = "some_generated_task_id_for_file"  # This should be generated by your task queue system
    return TaskOutput(task_id=task_id)


@router.get(
    "/list_videos",
    description="Получить список всех видео",
    tags=["Video Management"],
    status_code=status.HTTP_200_OK,
    response_model=List[VideoInfo]
)
def list_videos(db: Session = Depends(get_db)) -> List[VideoInfo]:
    videos = db.query(Video).all()
    return [
        VideoInfo(
            id=video.id,
            file_path=video.file_path,
            status=video.status,
            progress=video.progress,
            result=video.result,
            created_at=video.created_at,
            updated_at=video.updated_at
        )
        for video in videos
    ]
